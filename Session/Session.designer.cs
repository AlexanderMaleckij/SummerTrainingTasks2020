#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Session
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Session")]
	public partial class SessionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCredits(Credits instance);
    partial void UpdateCredits(Credits instance);
    partial void DeleteCredits(Credits instance);
    partial void InsertExams(Exams instance);
    partial void UpdateExams(Exams instance);
    partial void DeleteExams(Exams instance);
    partial void InsertKnowledgeControls(KnowledgeControls instance);
    partial void UpdateKnowledgeControls(KnowledgeControls instance);
    partial void DeleteKnowledgeControls(KnowledgeControls instance);
    partial void InsertSpecialties(Specialties instance);
    partial void UpdateSpecialties(Specialties instance);
    partial void DeleteSpecialties(Specialties instance);
    partial void InsertStudentGroups(StudentGroups instance);
    partial void UpdateStudentGroups(StudentGroups instance);
    partial void DeleteStudentGroups(StudentGroups instance);
    partial void InsertSubjects(Subjects instance);
    partial void UpdateSubjects(Subjects instance);
    partial void DeleteSubjects(Subjects instance);
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    partial void InsertTeachers(Teachers instance);
    partial void UpdateTeachers(Teachers instance);
    partial void DeleteTeachers(Teachers instance);
    #endregion
		
		public SessionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SessionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SessionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SessionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Credits> Credits
		{
			get
			{
				return this.GetTable<Credits>();
			}
		}
		
		public System.Data.Linq.Table<Exams> Exams
		{
			get
			{
				return this.GetTable<Exams>();
			}
		}
		
		public System.Data.Linq.Table<KnowledgeControls> KnowledgeControls
		{
			get
			{
				return this.GetTable<KnowledgeControls>();
			}
		}
		
		public System.Data.Linq.Table<Specialties> Specialties
		{
			get
			{
				return this.GetTable<Specialties>();
			}
		}
		
		public System.Data.Linq.Table<StudentGroups> StudentGroups
		{
			get
			{
				return this.GetTable<StudentGroups>();
			}
		}
		
		public System.Data.Linq.Table<Subjects> Subjects
		{
			get
			{
				return this.GetTable<Subjects>();
			}
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
		
		public System.Data.Linq.Table<Teachers> Teachers
		{
			get
			{
				return this.GetTable<Teachers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Credits")]
	public partial class Credits : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _KnowledgeControlId;
		
		private System.Nullable<int> _StudentId;
		
		private System.Nullable<bool> _IsPassed;
		
		private EntityRef<KnowledgeControls> _KnowledgeControls;
		
		private EntityRef<Students> _Students;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKnowledgeControlIdChanging(System.Nullable<int> value);
    partial void OnKnowledgeControlIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnIsPassedChanging(System.Nullable<bool> value);
    partial void OnIsPassedChanged();
    #endregion
		
		public Credits()
		{
			this._KnowledgeControls = default(EntityRef<KnowledgeControls>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeControlId", DbType="Int")]
		public System.Nullable<int> KnowledgeControlId
		{
			get
			{
				return this._KnowledgeControlId;
			}
			set
			{
				if ((this._KnowledgeControlId != value))
				{
					if (this._KnowledgeControls.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeControlIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeControlId = value;
					this.SendPropertyChanged("KnowledgeControlId");
					this.OnKnowledgeControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPassed", DbType="Bit")]
		public System.Nullable<bool> IsPassed
		{
			get
			{
				return this._IsPassed;
			}
			set
			{
				if ((this._IsPassed != value))
				{
					this.OnIsPassedChanging(value);
					this.SendPropertyChanging();
					this._IsPassed = value;
					this.SendPropertyChanged("IsPassed");
					this.OnIsPassedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeControls_Credits", Storage="_KnowledgeControls", ThisKey="KnowledgeControlId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public KnowledgeControls KnowledgeControls
		{
			get
			{
				return this._KnowledgeControls.Entity;
			}
			set
			{
				KnowledgeControls previousValue = this._KnowledgeControls.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeControls.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeControls.Entity = null;
						previousValue.Credits.Remove(this);
					}
					this._KnowledgeControls.Entity = value;
					if ((value != null))
					{
						value.Credits.Add(this);
						this._KnowledgeControlId = value.Id;
					}
					else
					{
						this._KnowledgeControlId = default(Nullable<int>);
					}
					this.SendPropertyChanged("KnowledgeControls");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Credits", Storage="_Students", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Credits.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Credits.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exams")]
	public partial class Exams : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _KnowledgeControlId;
		
		private System.Nullable<int> _StudentId;
		
		private byte _Mark;
		
		private EntityRef<KnowledgeControls> _KnowledgeControls;
		
		private EntityRef<Students> _Students;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKnowledgeControlIdChanging(System.Nullable<int> value);
    partial void OnKnowledgeControlIdChanged();
    partial void OnStudentIdChanging(System.Nullable<int> value);
    partial void OnStudentIdChanged();
    partial void OnMarkChanging(byte value);
    partial void OnMarkChanged();
    #endregion
		
		public Exams()
		{
			this._KnowledgeControls = default(EntityRef<KnowledgeControls>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowledgeControlId", DbType="Int")]
		public System.Nullable<int> KnowledgeControlId
		{
			get
			{
				return this._KnowledgeControlId;
			}
			set
			{
				if ((this._KnowledgeControlId != value))
				{
					if (this._KnowledgeControls.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowledgeControlIdChanging(value);
					this.SendPropertyChanging();
					this._KnowledgeControlId = value;
					this.SendPropertyChanged("KnowledgeControlId");
					this.OnKnowledgeControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int")]
		public System.Nullable<int> StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="TinyInt NOT NULL")]
		public byte Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeControls_Exams", Storage="_KnowledgeControls", ThisKey="KnowledgeControlId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public KnowledgeControls KnowledgeControls
		{
			get
			{
				return this._KnowledgeControls.Entity;
			}
			set
			{
				KnowledgeControls previousValue = this._KnowledgeControls.Entity;
				if (((previousValue != value) 
							|| (this._KnowledgeControls.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KnowledgeControls.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._KnowledgeControls.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._KnowledgeControlId = value.Id;
					}
					else
					{
						this._KnowledgeControlId = default(Nullable<int>);
					}
					this.SendPropertyChanged("KnowledgeControls");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Exams", Storage="_Students", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KnowledgeControls")]
	public partial class KnowledgeControls : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TeacherId;
		
		private System.Nullable<int> _StudentGroupId;
		
		private int _SubjectId;
		
		private System.Nullable<byte> _Semester;
		
		private System.DateTime _PassDate;
		
		private EntitySet<Credits> _Credits;
		
		private EntitySet<Exams> _Exams;
		
		private EntityRef<StudentGroups> _StudentGroups;
		
		private EntityRef<Subjects> _Subjects;
		
		private EntityRef<Teachers> _Teachers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnStudentGroupIdChanging(System.Nullable<int> value);
    partial void OnStudentGroupIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnSemesterChanging(System.Nullable<byte> value);
    partial void OnSemesterChanged();
    partial void OnPassDateChanging(System.DateTime value);
    partial void OnPassDateChanged();
    #endregion
		
		public KnowledgeControls()
		{
			this._Credits = new EntitySet<Credits>(new Action<Credits>(this.attach_Credits), new Action<Credits>(this.detach_Credits));
			this._Exams = new EntitySet<Exams>(new Action<Exams>(this.attach_Exams), new Action<Exams>(this.detach_Exams));
			this._StudentGroups = default(EntityRef<StudentGroups>);
			this._Subjects = default(EntityRef<Subjects>);
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int NOT NULL")]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentGroupId", DbType="Int")]
		public System.Nullable<int> StudentGroupId
		{
			get
			{
				return this._StudentGroupId;
			}
			set
			{
				if ((this._StudentGroupId != value))
				{
					if (this._StudentGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentGroupIdChanging(value);
					this.SendPropertyChanging();
					this._StudentGroupId = value;
					this.SendPropertyChanged("StudentGroupId");
					this.OnStudentGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Subjects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester", DbType="TinyInt")]
		public System.Nullable<byte> Semester
		{
			get
			{
				return this._Semester;
			}
			set
			{
				if ((this._Semester != value))
				{
					this.OnSemesterChanging(value);
					this.SendPropertyChanging();
					this._Semester = value;
					this.SendPropertyChanged("Semester");
					this.OnSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassDate", DbType="DateTime NOT NULL")]
		public System.DateTime PassDate
		{
			get
			{
				return this._PassDate;
			}
			set
			{
				if ((this._PassDate != value))
				{
					this.OnPassDateChanging(value);
					this.SendPropertyChanging();
					this._PassDate = value;
					this.SendPropertyChanged("PassDate");
					this.OnPassDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeControls_Credits", Storage="_Credits", ThisKey="Id", OtherKey="KnowledgeControlId")]
		public EntitySet<Credits> Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				this._Credits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KnowledgeControls_Exams", Storage="_Exams", ThisKey="Id", OtherKey="KnowledgeControlId")]
		public EntitySet<Exams> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroups_KnowledgeControls", Storage="_StudentGroups", ThisKey="StudentGroupId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public StudentGroups StudentGroups
		{
			get
			{
				return this._StudentGroups.Entity;
			}
			set
			{
				StudentGroups previousValue = this._StudentGroups.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroups.Entity = null;
						previousValue.KnowledgeControls.Remove(this);
					}
					this._StudentGroups.Entity = value;
					if ((value != null))
					{
						value.KnowledgeControls.Add(this);
						this._StudentGroupId = value.Id;
					}
					else
					{
						this._StudentGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("StudentGroups");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subjects_KnowledgeControls", Storage="_Subjects", ThisKey="SubjectId", OtherKey="Id", IsForeignKey=true)]
		public Subjects Subjects
		{
			get
			{
				return this._Subjects.Entity;
			}
			set
			{
				Subjects previousValue = this._Subjects.Entity;
				if (((previousValue != value) 
							|| (this._Subjects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subjects.Entity = null;
						previousValue.KnowledgeControls.Remove(this);
					}
					this._Subjects.Entity = value;
					if ((value != null))
					{
						value.KnowledgeControls.Add(this);
						this._SubjectId = value.Id;
					}
					else
					{
						this._SubjectId = default(int);
					}
					this.SendPropertyChanged("Subjects");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_KnowledgeControls", Storage="_Teachers", ThisKey="TeacherId", OtherKey="Id", IsForeignKey=true)]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.KnowledgeControls.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.KnowledgeControls.Add(this);
						this._TeacherId = value.Id;
					}
					else
					{
						this._TeacherId = default(int);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credits(Credits entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeControls = this;
		}
		
		private void detach_Credits(Credits entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeControls = null;
		}
		
		private void attach_Exams(Exams entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeControls = this;
		}
		
		private void detach_Exams(Exams entity)
		{
			this.SendPropertyChanging();
			entity.KnowledgeControls = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialties")]
	public partial class Specialties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SpecialtyName;
		
		private string _Description;
		
		private EntitySet<StudentGroups> _StudentGroups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpecialtyNameChanging(string value);
    partial void OnSpecialtyNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Specialties()
		{
			this._StudentGroups = new EntitySet<StudentGroups>(new Action<StudentGroups>(this.attach_StudentGroups), new Action<StudentGroups>(this.detach_StudentGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialtyName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SpecialtyName
		{
			get
			{
				return this._SpecialtyName;
			}
			set
			{
				if ((this._SpecialtyName != value))
				{
					this.OnSpecialtyNameChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyName = value;
					this.SendPropertyChanged("SpecialtyName");
					this.OnSpecialtyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialties_StudentGroups", Storage="_StudentGroups", ThisKey="Id", OtherKey="SpecialtyId")]
		public EntitySet<StudentGroups> StudentGroups
		{
			get
			{
				return this._StudentGroups;
			}
			set
			{
				this._StudentGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentGroups(StudentGroups entity)
		{
			this.SendPropertyChanging();
			entity.Specialties = this;
		}
		
		private void detach_StudentGroups(StudentGroups entity)
		{
			this.SendPropertyChanging();
			entity.Specialties = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentGroups")]
	public partial class StudentGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SpecialtyId;
		
		private string _GroupName;
		
		private int _SeptemberYear;
		
		private EntitySet<KnowledgeControls> _KnowledgeControls;
		
		private EntitySet<Students> _Students;
		
		private EntityRef<Specialties> _Specialties;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpecialtyIdChanging(int value);
    partial void OnSpecialtyIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnSeptemberYearChanging(int value);
    partial void OnSeptemberYearChanged();
    #endregion
		
		public StudentGroups()
		{
			this._KnowledgeControls = new EntitySet<KnowledgeControls>(new Action<KnowledgeControls>(this.attach_KnowledgeControls), new Action<KnowledgeControls>(this.detach_KnowledgeControls));
			this._Students = new EntitySet<Students>(new Action<Students>(this.attach_Students), new Action<Students>(this.detach_Students));
			this._Specialties = default(EntityRef<Specialties>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialtyId", DbType="Int NOT NULL")]
		public int SpecialtyId
		{
			get
			{
				return this._SpecialtyId;
			}
			set
			{
				if ((this._SpecialtyId != value))
				{
					if (this._Specialties.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialtyIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyId = value;
					this.SendPropertyChanged("SpecialtyId");
					this.OnSpecialtyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeptemberYear", DbType="Int NOT NULL")]
		public int SeptemberYear
		{
			get
			{
				return this._SeptemberYear;
			}
			set
			{
				if ((this._SeptemberYear != value))
				{
					this.OnSeptemberYearChanging(value);
					this.SendPropertyChanging();
					this._SeptemberYear = value;
					this.SendPropertyChanged("SeptemberYear");
					this.OnSeptemberYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroups_KnowledgeControls", Storage="_KnowledgeControls", ThisKey="Id", OtherKey="StudentGroupId")]
		public EntitySet<KnowledgeControls> KnowledgeControls
		{
			get
			{
				return this._KnowledgeControls;
			}
			set
			{
				this._KnowledgeControls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroups_Students", Storage="_Students", ThisKey="Id", OtherKey="StudentGroupId")]
		public EntitySet<Students> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialties_StudentGroups", Storage="_Specialties", ThisKey="SpecialtyId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Specialties Specialties
		{
			get
			{
				return this._Specialties.Entity;
			}
			set
			{
				Specialties previousValue = this._Specialties.Entity;
				if (((previousValue != value) 
							|| (this._Specialties.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialties.Entity = null;
						previousValue.StudentGroups.Remove(this);
					}
					this._Specialties.Entity = value;
					if ((value != null))
					{
						value.StudentGroups.Add(this);
						this._SpecialtyId = value.Id;
					}
					else
					{
						this._SpecialtyId = default(int);
					}
					this.SendPropertyChanged("Specialties");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KnowledgeControls(KnowledgeControls entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroups = this;
		}
		
		private void detach_KnowledgeControls(KnowledgeControls entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroups = null;
		}
		
		private void attach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroups = this;
		}
		
		private void detach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subjects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SubjectName;
		
		private EntitySet<KnowledgeControls> _KnowledgeControls;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    #endregion
		
		public Subjects()
		{
			this._KnowledgeControls = new EntitySet<KnowledgeControls>(new Action<KnowledgeControls>(this.attach_KnowledgeControls), new Action<KnowledgeControls>(this.detach_KnowledgeControls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subjects_KnowledgeControls", Storage="_KnowledgeControls", ThisKey="Id", OtherKey="SubjectId")]
		public EntitySet<KnowledgeControls> KnowledgeControls
		{
			get
			{
				return this._KnowledgeControls;
			}
			set
			{
				this._KnowledgeControls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KnowledgeControls(KnowledgeControls entity)
		{
			this.SendPropertyChanging();
			entity.Subjects = this;
		}
		
		private void detach_KnowledgeControls(KnowledgeControls entity)
		{
			this.SendPropertyChanging();
			entity.Subjects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StudentGroupId;
		
		private string _FullName;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private EntitySet<Credits> _Credits;
		
		private EntitySet<Exams> _Exams;
		
		private EntityRef<StudentGroups> _StudentGroups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudentGroupIdChanging(int value);
    partial void OnStudentGroupIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    #endregion
		
		public Students()
		{
			this._Credits = new EntitySet<Credits>(new Action<Credits>(this.attach_Credits), new Action<Credits>(this.detach_Credits));
			this._Exams = new EntitySet<Exams>(new Action<Exams>(this.attach_Exams), new Action<Exams>(this.detach_Exams));
			this._StudentGroups = default(EntityRef<StudentGroups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentGroupId", DbType="Int NOT NULL")]
		public int StudentGroupId
		{
			get
			{
				return this._StudentGroupId;
			}
			set
			{
				if ((this._StudentGroupId != value))
				{
					if (this._StudentGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentGroupIdChanging(value);
					this.SendPropertyChanging();
					this._StudentGroupId = value;
					this.SendPropertyChanged("StudentGroupId");
					this.OnStudentGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Credits", Storage="_Credits", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<Credits> Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				this._Credits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_Exams", Storage="_Exams", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<Exams> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroups_Students", Storage="_StudentGroups", ThisKey="StudentGroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudentGroups StudentGroups
		{
			get
			{
				return this._StudentGroups.Entity;
			}
			set
			{
				StudentGroups previousValue = this._StudentGroups.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroups.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._StudentGroups.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._StudentGroupId = value.Id;
					}
					else
					{
						this._StudentGroupId = default(int);
					}
					this.SendPropertyChanged("StudentGroups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credits(Credits entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Credits(Credits entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Exams(Exams entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Exams(Exams entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
	public partial class Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullName;
		
		private EntitySet<KnowledgeControls> _KnowledgeControls;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public Teachers()
		{
			this._KnowledgeControls = new EntitySet<KnowledgeControls>(new Action<KnowledgeControls>(this.attach_KnowledgeControls), new Action<KnowledgeControls>(this.detach_KnowledgeControls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_KnowledgeControls", Storage="_KnowledgeControls", ThisKey="Id", OtherKey="TeacherId")]
		public EntitySet<KnowledgeControls> KnowledgeControls
		{
			get
			{
				return this._KnowledgeControls;
			}
			set
			{
				this._KnowledgeControls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KnowledgeControls(KnowledgeControls entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_KnowledgeControls(KnowledgeControls entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
	}
}
#pragma warning restore 1591
